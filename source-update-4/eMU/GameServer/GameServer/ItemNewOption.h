// SetItemOption.h: interface for the CSetItemOption class.
//
//////////////////////////////////////////////////////////////////////

#pragma once

#include "Item.h"
#include "User.h"
#include "ItemNewType.h"


enum eNewItemOption
{
	NEW_ITEM_OPTION_ADD_STRENGTH = 0,
	NEW_ITEM_OPTION_ADD_DEXTERITY = 1,
	NEW_ITEM_OPTION_ADD_ENERGY = 2,
	NEW_ITEM_OPTION_ADD_VITALITY = 3,
	NEW_ITEM_OPTION_ADD_LEADERSHIP = 4,
	NEW_ITEM_OPTION_ADD_MIN_PHYSI_DAMAGE = 5,
	NEW_ITEM_OPTION_ADD_MAX_PHYSI_DAMAGE = 6,
	NEW_ITEM_OPTION_MUL_MAGIC_DAMAGE = 7,
	NEW_ITEM_OPTION_ADD_PHYSI_DAMAGE = 8,
	NEW_ITEM_OPTION_MUL_ATTACK_SUCCESS_RATE = 9,
	NEW_ITEM_OPTION_ADD_DEFENSE = 10,
	NEW_ITEM_OPTION_ADD_MAX_LIFE = 11,
	NEW_ITEM_OPTION_ADD_MAX_MANA = 12,
	NEW_ITEM_OPTION_ADD_MAX_BP = 13,
	NEW_ITEM_OPTION_ADD_BP_RECOVERY = 14,
	NEW_ITEM_OPTION_ADD_CRITICAL_DAMAGE_RATE = 15,
	NEW_ITEM_OPTION_ADD_CRITICAL_DAMAGE = 16,
	NEW_ITEM_OPTION_ADD_EXCELLENT_DAMAGE_RATE = 17,
	NEW_ITEM_OPTION_ADD_EXCELLENT_DAMAGE = 18,
	NEW_ITEM_OPTION_ADD_SKILL_DAMAGE = 19,
	NEW_ITEM_OPTION_ADD_DOUBLE_DAMAGE_RATE = 20,
	NEW_ITEM_OPTION_ADD_IGNORE_DEFENSE_RATE = 21,
	NEW_ITEM_OPTION_MUL_SHIELD_DEFENSE = 22,
	NEW_ITEM_OPTION_MUL_TWO_HAND_PHYSI_DAMAGE = 23,
	NEW_ITEM_OPTION_ADD_PHYSI_DAMAGE_BY_STRENGTH = 24,
	NEW_ITEM_OPTION_ADD_PHYSI_DAMAGE_BY_DEXTERITY = 25,
	NEW_ITEM_OPTION_ADD_DEFENSE_BY_DEXTERITY = 26,
	NEW_ITEM_OPTION_ADD_DEFENSE_BY_VITALITY = 27,
	NEW_ITEM_OPTION_ADD_MAGIC_DAMAGE_BY_ENERGY = 28,
	NEW_ITEM_OPTION_ADD_ICE_DAMAGE = 29,
	NEW_ITEM_OPTION_ADD_POISON_DAMAGE = 30,
	NEW_ITEM_OPTION_ADD_LIGHTNING_DAMAGE = 31,
	NEW_ITEM_OPTION_ADD_FIRE_DAMAGE = 32,
	NEW_ITEM_OPTION_ADD_EARTH_DAMAGE = 33,
	NEW_ITEM_OPTION_ADD_WIND_DAMAGE = 34,
	NEW_ITEM_OPTION_ADD_WATER_DAMAGE = 35,
};

#define MAX_ITEM_OPTION_COMBINATION 100
#define MAX_ITEM_OPTION_TABLE_COMBINATION 5
#define MAX_ITEM_FULL_OPTION_TABLE_COMBINATION 5


struct ITEM_OPTION_TABLE_COMBINATION
{
	int Index;
	int Value;
};

struct ITEM_OPTION_COMBINATION_INFO
{
	int Index;
	ITEM_OPTION_TABLE_COMBINATION OptionTable[MAX_ITEM_OPTION_TABLE_COMBINATION][MAX_ITEM_OPTION_INDEX_COMBINATION];
};

class CItemOptionCombination
{
public:
	CItemOptionCombination();
	virtual ~CItemOptionCombination();
	void Init();
	void Load(char* path);
	void SetInfo(ITEM_OPTION_COMBINATION_INFO info);
	ITEM_OPTION_COMBINATION_INFO* GetInfo(int index);
	int GetItemCombinationMaxOptionCount(int index);
	int GetInventoryItemCombinationOptionCount(LPOBJ lpObj,int index);
	void CalcItemOptionCombination(LPOBJ lpObj,bool flag);
	void InsertOption(LPOBJ lpObj,int index,int value,bool flag);
private:
	ITEM_OPTION_COMBINATION_INFO m_ItemOptionCombinationInfo[MAX_ITEM_OPTION_COMBINATION];
};

extern CItemOptionCombination gItemNewOption;
